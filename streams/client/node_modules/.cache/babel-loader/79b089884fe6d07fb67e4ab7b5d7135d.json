{"ast":null,"code":"var _jsxFileName = \"/Users/glenmcculloch/react-workspace/streams/client/src/components/streams/StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form'; // initial input,\n\nclass StreamForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.touched && meta.error ? 'error' : ''}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 17\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui error message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 21\n        }\n      }, error));\n    }\n  }\n\n  render() {\n    console.log(this.props);\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      label: \"Enter Title\",\n      component: this.renderInput,\n      type: \"text\",\n      value: this.props.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      label: \"Enter Description\",\n      component: this.renderInput,\n      type: \"text\",\n      value: this.props.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, \"Submit\"));\n  }\n\n}\n\n;\n\nconst validate = ({\n  title,\n  description\n}) => {\n  const errors = {};\n\n  if (!title) {\n    errors.title = \"You must enter a title.\";\n  }\n\n  if (!description) {\n    errors.description = \"You must enter a description.\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate: validate\n})(StreamForm);","map":{"version":3,"sources":["/Users/glenmcculloch/react-workspace/streams/client/src/components/streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","Component","renderInput","input","label","meta","className","touched","error","renderError","onSubmit","formValues","props","render","console","log","handleSubmit","title","description","validate","errors","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\n// initial input,\nclass StreamForm extends React.Component {\n    renderError({ error, touched }) {\n        if (touched && error) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({ input, label, meta }) => {\n        const className = `field ${meta.touched && meta.error ? 'error' : ''}`;\n        return (\n            <div className={className}>\n                <label>{label}</label>\n                <input {...input} autoComplete=\"off\" />\n                {this.renderError(meta)}\n            </div>\n        );\n    }\n\n    onSubmit = formValues => {\n        this.props.onSubmit(formValues);\n    }\n\n    render() {\n        console.log(this.props);\n        return (\n            <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                <Field \n                    name=\"title\"\n                    label=\"Enter Title\"\n                    component={this.renderInput}\n                    type=\"text\"\n                    value={this.props.title}\n                />\n                <Field \n                    name=\"description\"\n                    label=\"Enter Description\"\n                    component={this.renderInput}\n                    type=\"text\"\n                    value={this.props.description}\n                />\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        );\n    }\n};\n\nconst validate = ({ title, description }) => {\n    const errors = {};\n\n    if (!title) {\n        errors.title = \"You must enter a title.\";\n    }\n    if (!description) {\n        errors.description = \"You must enter a description.\";\n    }\n\n    return errors;\n};\n\nexport default reduxForm({\n    form: 'streamForm',\n    validate: validate\n})(StreamForm);"]},"metadata":{},"sourceType":"module"}